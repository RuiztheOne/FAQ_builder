{"ast":null,"code":"import axios from 'axios';\nimport { mockCategories, mockFaqs, delay, mockApiResponse } from './mockData';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK === 'true';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000 // 5 segundos de timeout\n});\n\n// Interceptor para tratamento de erros\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Função para verificar se deve usar dados mock\nconst shouldUseMock = error => {\n  var _error$message, _error$response;\n  return USE_MOCK_DATA || (error === null || error === void 0 ? void 0 : error.code) === 'ECONNREFUSED' || (error === null || error === void 0 ? void 0 : error.code) === 'ERR_NETWORK' || (error === null || error === void 0 ? void 0 : (_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.includes('Network Error')) || (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) >= 500;\n};\n\n// Wrapper para chamadas da API com fallback para mock\nconst apiCall = async (apiFunction, mockFunction) => {\n  if (USE_MOCK_DATA) {\n    console.log('Using mock data (forced by environment)');\n    return mockFunction();\n  }\n  try {\n    return await apiFunction();\n  } catch (error) {\n    if (shouldUseMock(error)) {\n      console.log('API unavailable, using mock data:', error.message);\n      return mockFunction();\n    }\n    throw error;\n  }\n};\n\n// Serviços para Categorias\nexport const categoryService = {\n  getAll: () => apiCall(() => api.get('/categories'), async () => {\n    await delay(300);\n    return mockApiResponse(mockCategories);\n  }),\n  getActive: () => apiCall(() => api.get('/categories/active'), async () => {\n    await delay(300);\n    return mockApiResponse(mockCategories.filter(cat => cat.active));\n  }),\n  getActiveWithCount: () => apiCall(() => api.get('/categories/active/with-count'), async () => {\n    await delay(300);\n    return mockApiResponse(mockCategories.filter(cat => cat.active));\n  }),\n  getById: id => apiCall(() => api.get(`/categories/${id}`), async () => {\n    await delay(200);\n    const category = mockCategories.find(cat => cat.id === parseInt(id));\n    return mockApiResponse(category || null);\n  }),\n  create: category => apiCall(() => api.post('/categories', category), async () => {\n    await delay(400);\n    const newCategory = {\n      ...category,\n      id: Date.now(),\n      active: true\n    };\n    return mockApiResponse(newCategory);\n  }),\n  update: (id, category) => apiCall(() => api.put(`/categories/${id}`, category), async () => {\n    await delay(400);\n    return mockApiResponse({\n      ...category,\n      id: parseInt(id)\n    });\n  }),\n  delete: id => apiCall(() => api.delete(`/categories/${id}`), async () => {\n    await delay(300);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  deactivate: id => apiCall(() => api.patch(`/categories/${id}/deactivate`), async () => {\n    await delay(300);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  reorder: categoryIds => apiCall(() => api.put('/categories/reorder', categoryIds), async () => {\n    await delay(400);\n    return mockApiResponse({\n      success: true\n    });\n  })\n};\n\n// Serviços para FAQs\nexport const faqService = {\n  getAll: () => apiCall(() => api.get('/faqs'), async () => {\n    await delay(400);\n    return mockApiResponse(mockFaqs);\n  }),\n  getActive: () => apiCall(() => api.get('/faqs/active'), async () => {\n    await delay(400);\n    return mockApiResponse(mockFaqs.filter(faq => faq.active));\n  }),\n  getPaginated: (page = 0, size = 10) => apiCall(() => api.get(`/faqs/paginated?page=${page}&size=${size}`), async () => {\n    await delay(400);\n    const start = page * size;\n    const end = start + size;\n    const paginatedFaqs = mockFaqs.slice(start, end);\n    return mockApiResponse({\n      content: paginatedFaqs,\n      totalElements: mockFaqs.length,\n      totalPages: Math.ceil(mockFaqs.length / size),\n      number: page,\n      size: size\n    });\n  }),\n  getByCategory: categoryId => apiCall(() => api.get(`/faqs/category/${categoryId}`), async () => {\n    await delay(300);\n    const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n    return mockApiResponse(categoryFaqs);\n  }),\n  getByCategoryPaginated: (categoryId, page = 0, size = 10) => apiCall(() => api.get(`/faqs/category/${categoryId}/paginated?page=${page}&size=${size}`), async () => {\n    await delay(300);\n    const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n    const start = page * size;\n    const end = start + size;\n    const paginatedFaqs = categoryFaqs.slice(start, end);\n    return mockApiResponse({\n      content: paginatedFaqs,\n      totalElements: categoryFaqs.length,\n      totalPages: Math.ceil(categoryFaqs.length / size),\n      number: page,\n      size: size\n    });\n  }),\n  getById: id => apiCall(() => api.get(`/faqs/${id}`), async () => {\n    await delay(200);\n    const faq = mockFaqs.find(f => f.id === parseInt(id));\n    return mockApiResponse(faq || null);\n  }),\n  search: query => apiCall(() => api.get(`/faqs/search?q=${encodeURIComponent(query)}`), async () => {\n    await delay(500);\n    const searchResults = mockFaqs.filter(faq => faq.question.toLowerCase().includes(query.toLowerCase()) || faq.answer.toLowerCase().includes(query.toLowerCase()) || faq.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase())));\n    return mockApiResponse(searchResults);\n  }),\n  searchByCategory: (categoryId, query) => apiCall(() => api.get(`/faqs/search/category/${categoryId}?q=${encodeURIComponent(query)}`), async () => {\n    await delay(500);\n    const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n    const searchResults = categoryFaqs.filter(faq => faq.question.toLowerCase().includes(query.toLowerCase()) || faq.answer.toLowerCase().includes(query.toLowerCase()) || faq.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase())));\n    return mockApiResponse(searchResults);\n  }),\n  getByTag: tag => apiCall(() => api.get(`/faqs/tag/${tag}`), async () => {\n    await delay(300);\n    const tagFaqs = mockFaqs.filter(faq => faq.tags.some(t => t.toLowerCase() === tag.toLowerCase()));\n    return mockApiResponse(tagFaqs);\n  }),\n  getByPriority: priority => apiCall(() => api.get(`/faqs/priority/${priority}`), async () => {\n    await delay(300);\n    const priorityFaqs = mockFaqs.filter(faq => faq.priority === priority);\n    return mockApiResponse(priorityFaqs);\n  }),\n  getMostViewed: (limit = 10) => apiCall(() => api.get(`/faqs/most-viewed?limit=${limit}`), async () => {\n    await delay(300);\n    const sortedFaqs = [...mockFaqs].sort((a, b) => b.viewCount - a.viewCount).slice(0, limit);\n    return mockApiResponse(sortedFaqs);\n  }),\n  getMostHelpful: (limit = 10) => apiCall(() => api.get(`/faqs/most-helpful?limit=${limit}`), async () => {\n    await delay(300);\n    const sortedFaqs = [...mockFaqs].sort((a, b) => b.helpfulCount - a.helpfulCount).slice(0, limit);\n    return mockApiResponse(sortedFaqs);\n  }),\n  create: faq => apiCall(() => api.post('/faqs', faq), async () => {\n    await delay(500);\n    const newFaq = {\n      ...faq,\n      id: Date.now(),\n      active: true,\n      viewCount: 0,\n      helpfulCount: 0,\n      notHelpfulCount: 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    return mockApiResponse(newFaq);\n  }),\n  update: (id, faq) => apiCall(() => api.put(`/faqs/${id}`, faq), async () => {\n    await delay(500);\n    const updatedFaq = {\n      ...faq,\n      id: parseInt(id),\n      updatedAt: new Date().toISOString()\n    };\n    return mockApiResponse(updatedFaq);\n  }),\n  delete: id => apiCall(() => api.delete(`/faqs/${id}`), async () => {\n    await delay(300);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  deactivate: id => apiCall(() => api.patch(`/faqs/${id}/deactivate`), async () => {\n    await delay(300);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  incrementView: id => apiCall(() => api.patch(`/faqs/${id}/view`), async () => {\n    await delay(200);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  markHelpful: id => apiCall(() => api.patch(`/faqs/${id}/helpful`), async () => {\n    await delay(200);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  markNotHelpful: id => apiCall(() => api.patch(`/faqs/${id}/not-helpful`), async () => {\n    await delay(200);\n    return mockApiResponse({\n      success: true\n    });\n  }),\n  reorder: faqIds => apiCall(() => api.put('/faqs/reorder', faqIds), async () => {\n    await delay(400);\n    return mockApiResponse({\n      success: true\n    });\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","mockCategories","mockFaqs","delay","mockApiResponse","API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_DATA","REACT_APP_USE_MOCK","api","create","baseURL","headers","timeout","interceptors","response","use","error","console","Promise","reject","shouldUseMock","_error$message","_error$response","code","message","includes","status","apiCall","apiFunction","mockFunction","log","categoryService","getAll","get","getActive","filter","cat","active","getActiveWithCount","getById","id","category","find","parseInt","post","newCategory","Date","now","update","put","delete","success","deactivate","patch","reorder","categoryIds","faqService","faq","getPaginated","page","size","start","end","paginatedFaqs","slice","content","totalElements","length","totalPages","Math","ceil","number","getByCategory","categoryId","categoryFaqs","getByCategoryPaginated","f","search","query","encodeURIComponent","searchResults","question","toLowerCase","answer","tags","some","tag","searchByCategory","getByTag","tagFaqs","t","getByPriority","priority","priorityFaqs","getMostViewed","limit","sortedFaqs","sort","a","b","viewCount","getMostHelpful","helpfulCount","newFaq","notHelpfulCount","createdAt","toISOString","updatedAt","updatedFaq","incrementView","markHelpful","markNotHelpful","faqIds"],"sources":["C:/Users/leand/ProjetoFAQ/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { mockCategories, mockFaqs, delay, mockApiResponse } from './mockData';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK === 'true';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 5000, // 5 segundos de timeout\n});\n\n// Interceptor para tratamento de erros\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Função para verificar se deve usar dados mock\nconst shouldUseMock = (error) => {\n  return USE_MOCK_DATA || \n         error?.code === 'ECONNREFUSED' || \n         error?.code === 'ERR_NETWORK' ||\n         error?.message?.includes('Network Error') ||\n         error?.response?.status >= 500;\n};\n\n// Wrapper para chamadas da API com fallback para mock\nconst apiCall = async (apiFunction, mockFunction) => {\n  if (USE_MOCK_DATA) {\n    console.log('Using mock data (forced by environment)');\n    return mockFunction();\n  }\n  \n  try {\n    return await apiFunction();\n  } catch (error) {\n    if (shouldUseMock(error)) {\n      console.log('API unavailable, using mock data:', error.message);\n      return mockFunction();\n    }\n    throw error;\n  }\n};\n\n// Serviços para Categorias\nexport const categoryService = {\n  getAll: () => apiCall(\n    () => api.get('/categories'),\n    async () => {\n      await delay(300);\n      return mockApiResponse(mockCategories);\n    }\n  ),\n  getActive: () => apiCall(\n    () => api.get('/categories/active'),\n    async () => {\n      await delay(300);\n      return mockApiResponse(mockCategories.filter(cat => cat.active));\n    }\n  ),\n  getActiveWithCount: () => apiCall(\n    () => api.get('/categories/active/with-count'),\n    async () => {\n      await delay(300);\n      return mockApiResponse(mockCategories.filter(cat => cat.active));\n    }\n  ),\n  getById: (id) => apiCall(\n    () => api.get(`/categories/${id}`),\n    async () => {\n      await delay(200);\n      const category = mockCategories.find(cat => cat.id === parseInt(id));\n      return mockApiResponse(category || null);\n    }\n  ),\n  create: (category) => apiCall(\n    () => api.post('/categories', category),\n    async () => {\n      await delay(400);\n      const newCategory = { ...category, id: Date.now(), active: true };\n      return mockApiResponse(newCategory);\n    }\n  ),\n  update: (id, category) => apiCall(\n    () => api.put(`/categories/${id}`, category),\n    async () => {\n      await delay(400);\n      return mockApiResponse({ ...category, id: parseInt(id) });\n    }\n  ),\n  delete: (id) => apiCall(\n    () => api.delete(`/categories/${id}`),\n    async () => {\n      await delay(300);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  deactivate: (id) => apiCall(\n    () => api.patch(`/categories/${id}/deactivate`),\n    async () => {\n      await delay(300);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  reorder: (categoryIds) => apiCall(\n    () => api.put('/categories/reorder', categoryIds),\n    async () => {\n      await delay(400);\n      return mockApiResponse({ success: true });\n    }\n  ),\n};\n\n// Serviços para FAQs\nexport const faqService = {\n  getAll: () => apiCall(\n    () => api.get('/faqs'),\n    async () => {\n      await delay(400);\n      return mockApiResponse(mockFaqs);\n    }\n  ),\n  getActive: () => apiCall(\n    () => api.get('/faqs/active'),\n    async () => {\n      await delay(400);\n      return mockApiResponse(mockFaqs.filter(faq => faq.active));\n    }\n  ),\n  getPaginated: (page = 0, size = 10) => apiCall(\n    () => api.get(`/faqs/paginated?page=${page}&size=${size}`),\n    async () => {\n      await delay(400);\n      const start = page * size;\n      const end = start + size;\n      const paginatedFaqs = mockFaqs.slice(start, end);\n      return mockApiResponse({\n        content: paginatedFaqs,\n        totalElements: mockFaqs.length,\n        totalPages: Math.ceil(mockFaqs.length / size),\n        number: page,\n        size: size\n      });\n    }\n  ),\n  getByCategory: (categoryId) => apiCall(\n    () => api.get(`/faqs/category/${categoryId}`),\n    async () => {\n      await delay(300);\n      const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n      return mockApiResponse(categoryFaqs);\n    }\n  ),\n  getByCategoryPaginated: (categoryId, page = 0, size = 10) => apiCall(\n    () => api.get(`/faqs/category/${categoryId}/paginated?page=${page}&size=${size}`),\n    async () => {\n      await delay(300);\n      const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n      const start = page * size;\n      const end = start + size;\n      const paginatedFaqs = categoryFaqs.slice(start, end);\n      return mockApiResponse({\n        content: paginatedFaqs,\n        totalElements: categoryFaqs.length,\n        totalPages: Math.ceil(categoryFaqs.length / size),\n        number: page,\n        size: size\n      });\n    }\n  ),\n  getById: (id) => apiCall(\n    () => api.get(`/faqs/${id}`),\n    async () => {\n      await delay(200);\n      const faq = mockFaqs.find(f => f.id === parseInt(id));\n      return mockApiResponse(faq || null);\n    }\n  ),\n  search: (query) => apiCall(\n    () => api.get(`/faqs/search?q=${encodeURIComponent(query)}`),\n    async () => {\n      await delay(500);\n      const searchResults = mockFaqs.filter(faq => \n        faq.question.toLowerCase().includes(query.toLowerCase()) ||\n        faq.answer.toLowerCase().includes(query.toLowerCase()) ||\n        faq.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))\n      );\n      return mockApiResponse(searchResults);\n    }\n  ),\n  searchByCategory: (categoryId, query) => apiCall(\n    () => api.get(`/faqs/search/category/${categoryId}?q=${encodeURIComponent(query)}`),\n    async () => {\n      await delay(500);\n      const categoryFaqs = mockFaqs.filter(faq => faq.categoryId === parseInt(categoryId));\n      const searchResults = categoryFaqs.filter(faq => \n        faq.question.toLowerCase().includes(query.toLowerCase()) ||\n        faq.answer.toLowerCase().includes(query.toLowerCase()) ||\n        faq.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))\n      );\n      return mockApiResponse(searchResults);\n    }\n  ),\n  getByTag: (tag) => apiCall(\n    () => api.get(`/faqs/tag/${tag}`),\n    async () => {\n      await delay(300);\n      const tagFaqs = mockFaqs.filter(faq => \n        faq.tags.some(t => t.toLowerCase() === tag.toLowerCase())\n      );\n      return mockApiResponse(tagFaqs);\n    }\n  ),\n  getByPriority: (priority) => apiCall(\n    () => api.get(`/faqs/priority/${priority}`),\n    async () => {\n      await delay(300);\n      const priorityFaqs = mockFaqs.filter(faq => faq.priority === priority);\n      return mockApiResponse(priorityFaqs);\n    }\n  ),\n  getMostViewed: (limit = 10) => apiCall(\n    () => api.get(`/faqs/most-viewed?limit=${limit}`),\n    async () => {\n      await delay(300);\n      const sortedFaqs = [...mockFaqs].sort((a, b) => b.viewCount - a.viewCount).slice(0, limit);\n      return mockApiResponse(sortedFaqs);\n    }\n  ),\n  getMostHelpful: (limit = 10) => apiCall(\n    () => api.get(`/faqs/most-helpful?limit=${limit}`),\n    async () => {\n      await delay(300);\n      const sortedFaqs = [...mockFaqs].sort((a, b) => b.helpfulCount - a.helpfulCount).slice(0, limit);\n      return mockApiResponse(sortedFaqs);\n    }\n  ),\n  create: (faq) => apiCall(\n    () => api.post('/faqs', faq),\n    async () => {\n      await delay(500);\n      const newFaq = { \n        ...faq, \n        id: Date.now(), \n        active: true, \n        viewCount: 0, \n        helpfulCount: 0, \n        notHelpfulCount: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      return mockApiResponse(newFaq);\n    }\n  ),\n  update: (id, faq) => apiCall(\n    () => api.put(`/faqs/${id}`, faq),\n    async () => {\n      await delay(500);\n      const updatedFaq = { \n        ...faq, \n        id: parseInt(id), \n        updatedAt: new Date().toISOString()\n      };\n      return mockApiResponse(updatedFaq);\n    }\n  ),\n  delete: (id) => apiCall(\n    () => api.delete(`/faqs/${id}`),\n    async () => {\n      await delay(300);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  deactivate: (id) => apiCall(\n    () => api.patch(`/faqs/${id}/deactivate`),\n    async () => {\n      await delay(300);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  incrementView: (id) => apiCall(\n    () => api.patch(`/faqs/${id}/view`),\n    async () => {\n      await delay(200);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  markHelpful: (id) => apiCall(\n    () => api.patch(`/faqs/${id}/helpful`),\n    async () => {\n      await delay(200);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  markNotHelpful: (id) => apiCall(\n    () => api.patch(`/faqs/${id}/not-helpful`),\n    async () => {\n      await delay(200);\n      return mockApiResponse({ success: true });\n    }\n  ),\n  reorder: (faqIds) => apiCall(\n    () => api.put('/faqs/reorder', faqIds),\n    async () => {\n      await delay(400);\n      return mockApiResponse({ success: true });\n    }\n  ),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}